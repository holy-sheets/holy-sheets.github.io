---
import type { MarkdownLayoutProps } from "astro";
import Sidebar, { type SidebarItem } from "../components/Sidebar.astro";
import Main from "../components/Main.astro";
import Header from "../components/Header.astro";

type MarkdownModule = {
  frontmatter: {
    title: string;
    slug: string;
    icon: string;
  };
  url: string;
};

const docs: Record<string, MarkdownModule> = import.meta.glob(
  "../pages/docs/**/*.md",
  {
    eager: true,
  },
);

type MenuItem = {
  slug: string;
  children?: {
    label: string;
    anchor: string;
  }[];
};

const menuItems: MenuItem[] = [
  {
    slug: "introduction",
  },
  {
    slug: "usage",
  },
  {
    slug: "getting-credentials",
  },
  {
    slug: "api",
    children: [
      {
        label: "base",
        anchor: "base",
      },
      {
        label: "findfirst",
        anchor: "findfirst",
      },
      {
        label: "findmany",
        anchor: "findmany",
      },
      {
        label: "updatefirst",
        anchor: "updatefirst",
      },
      {
        label: "updatemany",
        anchor: "updatemany",
      },
      {
        label: "clearfirst",
        anchor: "clearfirst",
      },
      {
        label: "clearmany",
        anchor: "clearmany",
      },
      {
        label: "deletefirst",
        anchor: "deletefirst",
      },
      {
        label: "deletemany",
        anchor: "deletemany",
      },
    ],
  },
  {
    slug: "filters",
  },
  {
    slug: "note",
  },
];

const sidebarItems: SidebarItem[] = menuItems.map((menuItem) => {
  const slug = menuItem.slug;
  const doc = Object.values(docs || {}).find(
    (doc) => doc.frontmatter.slug === slug,
  );
  if (!doc) throw new Error(`Doc not found for slug: ${slug}`);

  return {
    icon: doc.frontmatter.icon,
    label: doc.frontmatter.title,
    href: doc.url,
    slug: doc.frontmatter.slug,
    children: [
      ...(menuItem.children || []).map((child) => {
        return {
          label: child.label,
          href: `${doc.url}#${child.anchor}`,
        };
      }),
    ],
  };
});

type Props = MarkdownLayoutProps<{
  title: string;
  previous?: string;
  next?: string;
  slug: string;
}>;

const { title, slug } = Astro.props.frontmatter;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title ? title + " - Holysheets!" : ""}</title>
  </head>
  <body class="flex flex-col">
    <Header />
    <div class="flex flex-col md:flex-row container mx-auto relative">
      <Sidebar items={sidebarItems} active={slug} />
      <Main>
        <slot />
      </Main>
    </div>
  </body>
</html>
