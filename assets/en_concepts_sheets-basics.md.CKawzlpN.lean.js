import{_ as e,o as s,c as a,a2 as i}from"./chunks/framework.CAv1dD81.js";const g=JSON.parse('{"title":"Sheets Basics","description":"","frontmatter":{},"headers":[],"relativePath":"en/concepts/sheets-basics.md","filePath":"en/concepts/sheets-basics.md"}'),n={name:"en/concepts/sheets-basics.md"};function r(o,t,h,l,d,p){return s(),a("div",null,t[0]||(t[0]=[i(`<h1 id="sheets-basics" tabindex="-1">Sheets Basics <a class="header-anchor" href="#sheets-basics" aria-label="Permalink to &quot;Sheets Basics&quot;">​</a></h1><p>A Google Spreadsheet contains multiple sheets (tabs). <strong>HolySheets!</strong> operates on a specific sheet at a time via <code>base(&#39;SheetName&#39;)</code>.</p><ul><li><strong>Each sheet is treated as a &quot;table&quot;.</strong></li><li><strong>The first row is considered the header row.</strong></li><li><strong>HolySheets reads these headers to understand your columns.</strong></li></ul><h2 id="google-sheets-structure" tabindex="-1">Google Sheets Structure <a class="header-anchor" href="#google-sheets-structure" aria-label="Permalink to &quot;Google Sheets Structure&quot;">​</a></h2><p>To utilize <strong>HolySheets!</strong> effectively, it&#39;s essential to organize your Google Spreadsheet in a structured manner. Below are the key aspects of how <strong>HolySheets!</strong> interacts with your spreadsheet.</p><h2 id="sheets-as-tables" tabindex="-1">Sheets as Tables <a class="header-anchor" href="#sheets-as-tables" aria-label="Permalink to &quot;Sheets as Tables&quot;">​</a></h2><p>Each tab (sheet) in your Google Spreadsheet is considered a separate table within <strong>HolySheets!</strong>. You can interact with these tables using the <code>base</code> method.</p><h4 id="using-the-base-method" tabindex="-1">Using the <code>base</code> Method <a class="header-anchor" href="#using-the-base-method" aria-label="Permalink to &quot;Using the \`base\` Method&quot;">​</a></h4><p>To interact with a specific sheet, initialize <strong>HolySheets</strong> and select the desired sheet using the <code>base</code> method:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Holysheets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;holysheets&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize Holysheets with your Spreadsheet ID and authentication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sheets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holysheets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spreadsheetId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your-spreadsheet-id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  auth: yourAuthInstance </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OAuth2 or JWT instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Select the &#39;Tasks&#39; sheet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tasksTable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sheets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tasks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="rows-as-records" tabindex="-1">Rows as Records <a class="header-anchor" href="#rows-as-records" aria-label="Permalink to &quot;Rows as Records&quot;">​</a></h2><p>Each row in a sheet represents a unique record in the table. <strong>HolySheets!</strong> treats each row as an individual entry, allowing you to perform CRUD (Create, Read, Update, Delete) operations seamlessly.</p><h2 id="typescript-support" tabindex="-1">TypeScript Support <a class="header-anchor" href="#typescript-support" aria-label="Permalink to &quot;TypeScript Support&quot;">​</a></h2><p><strong>HolySheets!</strong> offers robust TypeScript support, enabling you to associate column names with property keys in your TypeScript interfaces. This ensures type safety and enhances developer experience.</p><h2 id="defining-interfaces" tabindex="-1">Defining Interfaces <a class="header-anchor" href="#defining-interfaces" aria-label="Permalink to &quot;Defining Interfaces&quot;">​</a></h2><p>Define interfaces that map to your sheet&#39;s columns:</p><div class="language-Typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  taskId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  assignedTo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  dueDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tasksTable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sheets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tasks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="example-spreadsheet-structure" tabindex="-1">Example Spreadsheet Structure <a class="header-anchor" href="#example-spreadsheet-structure" aria-label="Permalink to &quot;Example Spreadsheet Structure&quot;">​</a></h2><p>Below is an example of how your Google Spreadsheet should be structured for optimal use with <strong>HolySheets!</strong>.</p><h3 id="tasks-sheet" tabindex="-1">Tasks Sheet <a class="header-anchor" href="#tasks-sheet" aria-label="Permalink to &quot;Tasks Sheet&quot;">​</a></h3><table tabindex="0"><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>1</td><td><strong>Task ID</strong></td><td><strong>Title</strong></td><td><strong>Assigned To</strong></td><td><strong>Status</strong></td><td><strong>Due Date</strong></td></tr><tr><td>2</td><td>1</td><td>Design Homepage</td><td>Alice</td><td>In Progress</td><td>2024-05-10</td></tr><tr><td>3</td><td>2</td><td>Develop API</td><td>Bob</td><td>Pending</td><td>2024-05-15</td></tr><tr><td>4</td><td>3</td><td>Write Documentation</td><td>Charlie</td><td>Completed</td><td>2024-04-25</td></tr></tbody></table><h3 id="team-members-sheet" tabindex="-1">Team Members Sheet <a class="header-anchor" href="#team-members-sheet" aria-label="Permalink to &quot;Team Members Sheet&quot;">​</a></h3><table tabindex="0"><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>1</td><td><strong>Member ID</strong></td><td><strong>Name</strong></td><td><strong>Role</strong></td><td><strong>Email</strong></td></tr><tr><td>2</td><td>1</td><td>Alice</td><td>Designer</td><td><a href="mailto:alice@example.com" target="_blank" rel="noreferrer">alice@example.com</a></td></tr><tr><td>3</td><td>2</td><td>Bob</td><td>Backend Developer</td><td><a href="mailto:bob@example.com" target="_blank" rel="noreferrer">bob@example.com</a></td></tr><tr><td>4</td><td>3</td><td>Charlie</td><td>Technical Writer</td><td><a href="mailto:charlie@example.com" target="_blank" rel="noreferrer">charlie@example.com</a></td></tr></tbody></table><h3 id="projects-sheet" tabindex="-1">Projects Sheet <a class="header-anchor" href="#projects-sheet" aria-label="Permalink to &quot;Projects Sheet&quot;">​</a></h3><table tabindex="0"><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>1</td><td><strong>Project ID</strong></td><td><strong>Project Name</strong></td><td><strong>Start Date</strong></td><td><strong>End Date</strong></td><td><strong>Status</strong></td></tr><tr><td>2</td><td>101</td><td>Website Redesign</td><td>2024-04-01</td><td>2024-06-30</td><td>Ongoing</td></tr><tr><td>3</td><td>102</td><td>Mobile App Launch</td><td>2024-05-15</td><td>2024-09-15</td><td>Planning</td></tr><tr><td>4</td><td>103</td><td>API Integration</td><td>2024-03-20</td><td>2024-07-20</td><td>Completed</td></tr></tbody></table><h2 id="api-access-limits" tabindex="-1">API Access Limits <a class="header-anchor" href="#api-access-limits" aria-label="Permalink to &quot;API Access Limits&quot;">​</a></h2><p>When interacting with the Google Sheets API through <strong>HolySheets!</strong>, it&#39;s important to be aware of the usage limits imposed by Google to ensure smooth and uninterrupted operations.</p><h2 id="google-sheets-api-quotas" tabindex="-1">Google Sheets API Quotas <a class="header-anchor" href="#google-sheets-api-quotas" aria-label="Permalink to &quot;Google Sheets API Quotas&quot;">​</a></h2><ul><li><strong>Requests per 100 Seconds per User:</strong> 100</li><li><strong>Requests per 100 Seconds per Project:</strong> 100</li><li><strong>Requests per Minute per User:</strong> 60</li></ul><p>Exceeding these limits may result in your requests being throttled or temporarily blocked. To manage your usage effectively:</p><ul><li><strong>Batch Requests:</strong> Combine multiple operations into a single request where possible.</li><li><strong>Implement Retries:</strong> Incorporate exponential backoff strategies to handle rate limiting gracefully.</li><li><strong>Monitor Usage:</strong> Regularly check your Google Cloud Console to monitor your API usage and adjust your application&#39;s behavior accordingly.</li></ul><p>For detailed and up-to-date information, refer to the <a href="https://developers.google.com/sheets/api/limits" target="_blank" rel="noreferrer">Google Sheets API Quotas</a>.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>Adhering to best practices ensures that your integration with <strong>HolySheets</strong> is efficient, reliable, and maintainable.</p><ul><li><strong>Consistent Headers:</strong> Ensure that the first row of your spreadsheet contains clear and consistent headers. <strong>HolySheets</strong> relies on these headers to map the data correctly.</li><li><strong>Data Types:</strong> Maintain consistent data types within each column to avoid unexpected behavior during data operations.</li><li><strong>Unique Identifiers:</strong> Use unique identifiers (such as <code>Task ID</code>) for each row to simplify update and delete operations.</li><li><strong>Organize Sheets:</strong> Structure your spreadsheet logically, separating different types of data into distinct sheets (e.g., Tasks, Team Members, Projects).</li></ul><h2 id="important-considerations" tabindex="-1">Important Considerations <a class="header-anchor" href="#important-considerations" aria-label="Permalink to &quot;Important Considerations&quot;">​</a></h2><p>While <strong>HolySheets!</strong> offers a powerful way to interact with Google Sheets as if they were traditional databases, there are important considerations to keep in mind:</p><ul><li><strong>Not a Replacement for a Real Database:</strong> Google Sheets is not designed to handle large-scale data operations like a dedicated database system. <strong>HolySheets</strong> is ideal for lightweight applications and scenarios where real-time collaboration is essential, but it may be significantly slower and less reliable for high-volume or mission-critical applications.</li><li><strong>Performance Limitations:</strong> Due to the inherent limitations of Google Sheets and the API access quotas, performance may degrade with large datasets or frequent read/write operations.</li><li><strong>Data Integrity:</strong> While <strong>HolySheets</strong> facilitates data manipulation, ensuring data integrity and handling concurrent modifications require careful implementation.</li><li><strong>Security:</strong> Manage your authentication credentials securely. Ensure that only authorized users and services have access to your spreadsheets to protect sensitive data.</li></ul><p>By understanding these limitations, you can make informed decisions about when and how to use <strong>HolySheets!</strong> effectively within your projects.</p><p><strong>Happy Coding!</strong> 🚀</p>`,40)]))}const k=e(n,[["render",r]]);export{g as __pageData,k as default};
